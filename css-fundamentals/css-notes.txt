CSS - Cascading Style Sheets

CSS describes the visual style and presentation of the content written in HTML.


h1
{
 color: blue;
 text-align:center;
 font-size:20px;

}

In this "h1" --> Selector

"font-size:20px;" --> Declaration /Style
"font-size" --> Property

"20px" --> Value

The below entire area is called as "Declaration Block"
{
 color: blue;
 text-align:center;
 font-size:20px;

}

So the "Selector + Declaration Block" is called a "CSS Rule".

============================================================
                      PAGE BREAK                         
============================================================

We can write CSS in 3 places 
1) Inline CSS
2) Internal CSS
3) External CSS


1) Inline CSS
<h1 style="color: blue">üìò The Code Magazine</h1>

Inline styles should never be used.

2) Internal CSS

 <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>HTML Basics</title>
    <style>
      h1 {
        color: green;
      }
    </style>
  </head>

It is fine to use internal css for smaller projects.
If we have 500 lines of css code then this will not be a good approach.

3) External Style

We will have a separate file "style.css"

and we will link that css file to the html file by :-

 <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>HTML Basics</title>
    <link rel="stylesheet" href="style.css" />
  </head>

============================================================
                      PAGE BREAK                         
============================================================

Representing Colors

1) RGB Model

RGB Model : Every color can be represented by a combination of RED,GREEN,BLUE.

Each of the 3 base colors can take a value from 0 to 255 , which leads to 16.8 million different colors.

Red - RGB (R-255,G-0,B-0)
Green - RGB (R-0,G-255,B-0)
Blue - RGB (R-0,G-0,B-255)

White - RGB (R-255,G-255,B-255)
Black - RGB (R-0,G-0,B-0)

----Defining Colors in CSS----

1) RGB/RGBA Notation

rgb(0,255,255)

rgb(244,179,63)

----RGB with transparency (RGBA) ----
// A stands for alpha

rgba(0,255,255,0.3)

2) Hexadecimal Notation

Instead of using a scale from 0 to 255 , we will be using 0 to ff (255 in hexadecimal numbers)

#00ffff

#f4b33f

We can also use a shorthand , when all the colors are identical pairs

#0ff


In practise , we mostly use the hexadecimal colors and rgba when we need transparency.

-----SHADES OF GREY-----

When colors in all 3 channels are the same we get a grey color.

There are 256 pure grays to choose from

rgb(69,69,69) 
#444


rgb(183,183,183)
#b7b7b7

============================================================
                      PAGE BREAK                         
============================================================


============================================================
                      CSS THEORY #1: Conflicts Between Selectors                         
============================================================

 <p id="author-text" class="author">
          Posted by <strong>Laura Jones</strong> on Monday, June 21st 2027
        </p>

.author{
  font-style:italic;
  font-size:18px;
}

#author-text{
  font-size:20px;
}

p, li{
  font-family: sans-serif;
  color:#444;
  font-size:22px;
}

So in this example, there are 3 rules applied to one element.

Which of the rules applies to the element?

The answer is :- all of them applies to the <p> element.

But when we see those rules , there is a conflicting font size declarations for <p> element.

So for the <p> which will be the font size applied ? 18px , 20px or 22 px?

[==== CSS Selectors Specificity Hierarchy ====]

In CSS, specificity determines which rules take precedence when multiple selectors apply to the same element. Here's a quick note summarizing CSS specificity from highest to lowest:

1. Inline Styles (Highest Specificity)
- Applied directly to an element using the `style` attribute.
- Example:
  <div style="color: red;">Text</div>
- Specificity: 1000

2. IDs
- Selectors using the `#id` pattern target specific elements by their unique ID.
- Example:
  #myId {
    color: blue;
  }
- Specificity: 100

3. Classes, Attributes, and Pseudo-classes
- Includes `.class`, `[attribute]`, and `:pseudo-class` selectors.
- Examples:
  .myClass {
    color: green;
  }

  [type="text"] {
    background: yellow;
  }

  :hover {
    text-decoration: underline;
  }
- Specificity: 10

4. Elements and Pseudo-elements (Lowest Specificity)
- Includes element selectors (e.g., `div`, `p`) and pseudo-elements (e.g., `::before`, `::after`).
- Examples:
  div {
    margin: 10px;
  }

  ::before {
    content: "Hello";
  }
- Specificity: 1

Universal selector(*) has the lowest priority of them all.


General Rules:
1. Higher specificity wins: Inline styles will override IDs, IDs will override classes, and so on.
2. Specificity ties: The latter rule in the stylesheet or document wins (the rule written last applies).
3. Important declaration (`!important`) overrides everything: 
   p {
     color: blue !important;
   }
   The `!important` rule takes precedence regardless of specificity.


Practical Example:
HTML:
<div id="uniqueId" class="myClass">
  Hello, world!
</div>

CSS:
div {
  color: black; /* Specificity: 1 */
}

.myClass {
  color: green; /* Specificity: 10 */
}

#uniqueId {
  color: blue; /* Specificity: 100 */
}

div#uniqueId.myClass {
  color: red; /* Specificity: 111 */
}

- The text "Hello, world!" will be red, as the last rule has the highest specificity (111).


Tips to Manage Specificity:
- Avoid overusing IDs; prefer classes for reusability.
- Use simple selectors and minimize nesting.
- Use `!important` sparingly and only when absolutely necessary.


<p id="author-text" class="author">
          Posted by <strong>Laura Jones</strong> on Monday, June 21st 2027
        </p>

.author{
  font-style:italic;
  font-size:18px;
}

#author-text{
  font-size:20px;
}

p, li{
  font-family: sans-serif;
  color:#444;
  font-size:22px;
}

The rule with the highest specificity wins if there is a conflict.
#author-text (specificity 0-1-0) is more specific than .author (0-0-1) and p (0-0-0).
Therefore, the font-size: 20px; defined in the #author-text rule will be applied.
The font size applied to the <p> element is 20px.

The other properties like font-style: italic; (from .author) and font-family: sans-serif; (from p) will still be applied since they are not overridden by a more specific rule.

So the Hierarchy goes like (Highest to lowest)
1) Declarations marked as (!important)
2) Inline style 
3) ID(#)selector
4) Class(.) or pseudo-class(:) selector
5) Element selector (p,div,li etc)
6) Universal Selector (*)

============================================================
                      CSS THEORY #2: Inheritance and Universal Selector                        
============================================================

An inherited property is very easily overwritten by any rule which has a value for that same property.

Inhertited valus are the ones which has the lowest priority.

body {
  color: #444;
  font-family: sans-serif;
}

Here the elements are inheriting values for certain properties from one another , so these are not conflicting selectors or this body {} selector is not selecting all of these elements.

It doesnot apply to all the elements.

So the properties like color and font-family which we declared in the body is simply passed down to all the child elements that are contained within the body.


Not all properties will be inherited by other elements. For example :-

body {
  color: #444;
  font-family: sans-serif;
  border-top: 10px solid #1098ad;
}

This border-top will be applied only for the body element and not all other child elements will have this style applied to it and that would be very impractical.

‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  Notes         ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

- Not all properties get inherited , it's mostly ones related to text:
font-family, font-size,font-weight,font-style,color,line-height,letter-spacing,text-align,text-transform,text-shadow,list-style etc.

Suppose , lets say 

 <nav>
        <a href="blog.html">Blog</a>
        <a href="#">Challenges</a>
        <a href="#">Flexbox</a>
        <a href="#">Grid</a>
      </nav>

nav a:link {
  font-size: 18px;
}

We want to have a paragraph also which needs to inherit this 18px

 <nav>
        <p>This is navigation</p>
        <a href="blog.html">Blog</a>
        <a href="#">Challenges</a>
        <a href="#">Flexbox</a>
        <a href="#">Grid</a>
</nav>

So for that we can do something like 

nav a:link ,
nav p
 {
  font-size: 18px;
}


But a more simliar approach will be 

nav{
  font-size: 18px;
}

So in this case , if we haven't specify a style for <p> and <a>, normally it will inherit the font size for <nav> .


If we want to apply a certain style to each and every element then we can use the universal selector.

*{
  border-top: 10px solid #1098ad;
}

This border top will be applied to each and every element, this example is little funny , but universal selector can come in handy at certain situations.

Universal selector has the lowest priority.

